import os
import logging

import aiogram.utils.exceptions
from aiogram import Bot, types
# –ü–∞–º—è—Ç—å –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–º–ø–æ—Ä—Ç—ã
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import calendar
import datetime

import db

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()


class MenuStates(StatesGroup):
    start = State()
    expense = State()
    expense_enter_file = State()
    income = State()
    income_enter_file = State()
    fraction_enter = State()
    fraction_pay = State()
    fraction_choose_who = State()
    fraction_enter_sum = State()
    fraction_to_pay = State()
    fraction_to_who = State()
    report = State()
    choose_period = State()
    choose_second_period = State()
    send_report = State()


def generate_prev_month_button(year, month):
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    prev_month = month - 1
    prev_year = year
    if prev_month == 0:
        prev_month = 12
        prev_year -= 1
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    button = InlineKeyboardButton("<", callback_data=f"calendar-month-{prev_year}-{prev_month}")
    return button


def generate_next_month_button(year, month):
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    next_month = month + 1
    next_year = year
    if next_month == 13:
        next_month = 1
        next_year += 1
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    button = InlineKeyboardButton(">", callback_data=f"calendar-month-{next_year}-{next_month}")
    return button


def generate_calendar(year, month):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    keyboard = InlineKeyboardMarkup(row_width=7)
    keyboard.add(InlineKeyboardButton(f"{calendar.month_name[month]} {year}", callback_data="ignore"))
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    first_day = datetime.date(year, month, 1)
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞ (0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    first_weekday = first_day.weekday()
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    _, days_in_month = calendar.monthrange(year, month)
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
    days_of_week = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    row = []
    for day in days_of_week:
        row.append(types.InlineKeyboardButton(text=day, callback_data=f"ignore"))
    keyboard.row(*row)
    day = 1
    for i in range(6):
        row = []
        for j in range(7):
            if i == 0 and j < first_weekday:
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
            elif day > days_in_month:
                break
            else:
                row.append(InlineKeyboardButton(str(day),
                                                callback_data="calendar-day-" + str(day) + '-' + str(month) + '-' + str(
                                                    year)))
                day += 1
        keyboard.row(*row)
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
    prev_month_button = generate_prev_month_button(year, month)
    next_month_button = generate_next_month_button(year, month)
    keyboard.row(
        prev_month_button,
        next_month_button
    )
    return keyboard


def gen_markup(texts: int, prefix: str, row_width: int) -> InlineKeyboardMarkup:
    markup = InlineKeyboardMarkup(row_width=row_width)
    for num in range(texts):
        markup.insert(InlineKeyboardButton(f"{prefix} {num + 1}", callback_data=f"{prefix} {num + 1}"))
    return markup


logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏—Å—Ö–æ–¥—è –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
bot = Bot(token="6395802297:AAGSL6IBKgTVN8dPRHNVjUzLHuLCHy_y5lM")
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

main_menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
    KeyboardButton(text="–†–∞—Å—Ö–æ–¥"), KeyboardButton(text="–î–æ—Ö–æ–¥"), KeyboardButton(text="–î–æ–ª–∏"),
    KeyboardButton(text="–û—Ç—á—ë—Ç"))

fraction_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
    KeyboardButton(text="–í—ã–ø–ª–∞—Ç–∏—Ç—å"), KeyboardButton(text="–ö –≤—ã–ø–ª–∞—Ç–µ")).add(KeyboardButton(text="–ù–∞–∑–∞–¥"))

fraction_choose_who_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
    KeyboardButton(text="–ú–∏—à–∞"), KeyboardButton(text="–î–∞—Ç–æ"), KeyboardButton(text="–ì–ª–µ–±")).add(
    KeyboardButton(text="–ù–∞–∑–∞–¥"))

choose_period_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
    KeyboardButton(text="–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"), KeyboardButton(text="–ü–µ—Ä–∏–æ–¥")).add(KeyboardButton(text="–ù–∞–∑–∞–¥"))

back_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(KeyboardButton(text="–ù–∞–∑–∞–¥"))

back_n_next_button = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
    KeyboardButton(text="–î–∞–ª–µ–µ"), KeyboardButton(text="–ù–∞–∑–∞–¥"))

pay_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(
    KeyboardButton(text="–í—ã–ø–ª–∞—Ç–∏—Ç—å"), KeyboardButton(text="–ù–∞–∑–∞–¥"))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands='start', state='*')
async def command_start(message: types.Message, state: FSMContext):
    await state.finish()

    await db.user_exists(message.from_user.id)

    await bot.send_message(message.from_user.id, "–°–∞–ª–∞–º, –±—Ä–∞—Ç! –†–µ—á—å –ø–æ–π–¥–µ—Ç –æ —Ç—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã—Ö —Ü–∏—Ñ—Ä–∞—Ö üí∑üí∑üí∑",
                           reply_markup=main_menu_keyboard)
    await MenuStates.start.set()


@dp.message_handler(state=MenuStates.start)
async def menu_handle(message: types.Message, state: FSMContext):
    match message.text:
        case "–†–∞—Å—Ö–æ–¥":
            await bot.send_message(message.from_user.id, "–°–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏?", reply_markup=back_keyboard)
            await MenuStates.expense.set()

        case "–î–æ—Ö–æ–¥":
            await bot.send_message(message.from_user.id, "–°–ª–∞–≤–∞ –í—Å–µ–≤—ã—à–Ω–µ–º—É! –°–∫–æ–ª—å–∫–æ –ø–æ–¥–Ω—è–ª–∏?",
                                   reply_markup=back_keyboard)
            await MenuStates.income.set()

        case "–î–æ–ª–∏":
            await bot.send_message(message.from_user.id, "–í—ã–ø–ª–∞—Ç–∏—Ç—å: –æ—Ç—á–∏—Ç–∞—Ç—å—Å—è –æ –≤—ã–ø–ª–∞—Ç–µ –¥–æ–ª–∏ —Å–µ–±–µ –∏–ª–∏ –±—Ä–∞—Ç—É.\n"
                                                         "–ö –≤—ã–ø–ª–∞—Ç–µ: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ–ª–∂–Ω—ã –≤—ã–ø–ª–∞—Ç–∏—Ç—å"
                                                         " —Ç–µ–±–µ –∏–ª–∏ –±—Ä–∞—Ç—É.", reply_markup=fraction_keyboard)
            await MenuStates.fraction_enter.set()

        case "–û—Ç—á—ë—Ç":
            await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥", reply_markup=choose_period_keyboard)
            await MenuStates.report.set()

        case _:
            await bot.send_message(message.from_user.id, "–ò–∑–≤–∏–Ω–∏, –±—Ä–∞—Ç, –Ω–æ —Ç—É—Ç –Ω–∞–¥–æ –ø—É–Ω–∫—Ç—ã –≤—ã–±–∏—Ä–∞—Ç—å")


@dp.message_handler(state=MenuStates.expense)
async def expense_sum_handle(message: types.Message, state: FSMContext):
    match message.text:
        case "–ù–∞–∑–∞–¥":
            await bot.send_message(message.from_user.id, "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", reply_markup=main_menu_keyboard)
            await MenuStates.start.set()

        case _:
            try:
                int(message.text)
                async with state.proxy() as data:
                    if "income" not in data:
                        data["expense"] = message.text
                await bot.send_message(message.from_user.id, "–ù–∞ —á—Ç–æ –º—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥, –±—Ä–∞—Ç?"
                                                             " –ü–æ—è—Å–Ω–∏ –≤ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö.", reply_markup=back_keyboard)

                await MenuStates.expense_enter_file.set()

            except ValueError:
                await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä–∞–º–∏, –±–µ–∑ –±—É–∫–≤, –∑–Ω–∞–∫–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤",
                                       reply_markup=back_keyboard)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ expense_sum_handle {e}")


@dp.message_handler(content_types=types.ContentTypes.PHOTO, state=MenuStates.expense_enter_file)
async def handle_photos(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with state.proxy() as data:
        if "photos" not in data:
            data["photos"] = []

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–ø–∏—Å–æ–∫
        data["photos"].append(message.photo[-1].file_id)

    # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    await message.reply("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=back_n_next_button)


@dp.message_handler(content_types=types.ContentTypes.DOCUMENT, state=MenuStates.expense_enter_file)
async def handle_docs(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with state.proxy() as data:
        if "documents" not in data:
            data["documents"] = []

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–ø–∏—Å–æ–∫
        data["documents"].append(message.document.file_id)

    # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    await message.reply("–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=back_n_next_button)


@dp.message_handler(content_types=types.ContentTypes.VIDEO, state=MenuStates.expense_enter_file)
async def handle_docs(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with state.proxy() as data:
        if "video" not in data:
            data["video"] = []

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–ø–∏—Å–æ–∫
        data["video"].append(message.photo[-1].file_id)

    # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    await message.reply("–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=back_n_next_button)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
@dp.message_handler(content_types=types.ContentTypes.TEXT, state=MenuStates.expense_enter_file)
async def choose_will_be_photo(message: types.Message, state: FSMContext):
    if '–ù–∞–∑–∞–¥' in message.text:
        await bot.send_message(message.from_user.id, "–¢–∞–∫ —Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏, –±—Ä–∞—Ç?",
                               reply_markup=back_keyboard)
        await MenuStates.expense.set()

    elif "–î–∞–ª–µ–µ" in message.text:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        async with state.proxy() as data:
            try:
                photos = data["photos"]

                photos_for_save = []

                os.makedirs('photos', exist_ok=True)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                for photo_id in photos:
                    file_info = await bot.get_file(photo_id)
                    file_path = file_info.file_path

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ
                    await bot.download_file(file_path, f'photos/{photo_id}.jpg')
                    photos_for_save.append(f'photos/{photo_id}.jpg')

                await db.update_attachments_expense(message.from_user.id, photos_for_save)

            except KeyError:
                pass

            try:
                documents = data["documents"]

                documents_for_save = []

                os.makedirs('documents', exist_ok=True)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                for docs_id in documents:
                    try:
                        file_info = await bot.get_file(docs_id)

                    except aiogram.utils.exceptions.FileIsTooBig:
                        await message.reply("–ë—Ä–∞—Ç, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª —Ç—ã –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª")

                    file_path = file_info.file_path

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ
                    await bot.download_file(file_path, f'documents/{docs_id}.pdf')
                    documents_for_save.append(f'documents/{docs_id}.pdf')

                await db.update_attachments_expense(message.from_user.id, documents_for_save)

            except KeyError:
                pass

            try:
                video = data["video"]

                video_for_save = []

                os.makedirs('video', exist_ok=True)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
                for video_id in video:
                    file_info = await bot.get_file(video_id)
                    file_path = file_info.file_path

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ
                    await bot.download_file(file_path, f'video/{video_id}.mp4')
                    video_for_save.append(f'video/{video_id}.mp4')

                await db.update_attachments_expense(message.from_user.id, video_for_save)

            except KeyError:
                pass

        async with state.proxy() as data:
            expense = data["expense"]

            await db.update_expense(message.from_user.id, expense)

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.reset_state()

        # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await message.reply("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ", reply_markup=main_menu_keyboard)
        await MenuStates.start.set()

    else:
        await bot.send_message(message.from_user.id, "–ë—Ä–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É",
                               reply_markup=back_keyboard)


@dp.message_handler(state=MenuStates.income)
async def income_sum_handle(message: types.Message, state: FSMContext):
    match message.text:
        case "–ù–∞–∑–∞–¥":
            await bot.send_message(message.from_user.id, "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", reply_markup=main_menu_keyboard)
            await MenuStates.start.set()

        case _:
            try:
                int(message.text)
                async with state.proxy() as data:
                    if "income" not in data:
                        data["income"] = message.text
                await bot.send_message(message.from_user.id, "–ù–∞ —á–µ–º –ø–æ–¥–Ω—è–ª–∏ —Ç–∞–∫—É—é –∫–æ—Ç–ª–µ—Ç—É?"
                                                             " –ü–æ—è—Å–Ω–∏ –ø–∞—Ü–∞–Ω–∞–º –ø–æ-–±—Ä–∞—Ç—Å–∫–∏.", reply_markup=back_keyboard)
                await MenuStates.income_enter_file.set()

            except ValueError:
                await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä–∞–º–∏, –±–µ–∑ –±—É–∫–≤, –∑–Ω–∞–∫–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤",
                                       reply_markup=back_keyboard)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ income_sum_handle {e}")


@dp.message_handler(content_types=types.ContentTypes.PHOTO, state=MenuStates.income_enter_file)
async def handle_photos(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with state.proxy() as data:
        if "photos" not in data:
            data["photos"] = []

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–ø–∏—Å–æ–∫
        data["photos"].append(message.photo[-1].file_id)

    # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    await message.reply("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=back_n_next_button)


@dp.message_handler(content_types=types.ContentTypes.DOCUMENT, state=MenuStates.income_enter_file)
async def handle_docs(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with state.proxy() as data:
        if "documents" not in data:
            data["documents"] = []

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–ø–∏—Å–æ–∫
        data["documents"].append(message.document.file_id)

    # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    await message.reply("–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=back_n_next_button)


@dp.message_handler(content_types=types.ContentTypes.VIDEO, state=MenuStates.income_enter_file)
async def handle_docs(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with state.proxy() as data:
        if "video" not in data:
            data["video"] = []

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–ø–∏—Å–æ–∫
        data["video"].append(message.photo[-1].file_id)

    # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    await message.reply("–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=back_n_next_button)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
@dp.message_handler(content_types=types.ContentTypes.TEXT, state=MenuStates.income_enter_file)
async def choose_will_be_photo(message: types.Message, state: FSMContext):
    if '–ù–∞–∑–∞–¥' in message.text:
        await bot.send_message(message.from_user.id, "–¢–∞–∫ —Å–∫–æ–ª—å–∫–æ –ø–æ–¥–Ω—è–ª–∏ –±–∞–±–ª–∞, –±—Ä–∞—Ç?",
                               reply_markup=back_keyboard)
        await MenuStates.income.set()

    elif "–î–∞–ª–µ–µ" in message.text:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        async with state.proxy() as data:
            try:
                photos = data["photos"]

                photos_for_save = []

                os.makedirs('photos', exist_ok=True)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                for photo_id in photos:
                    file_info = await bot.get_file(photo_id)
                    file_path = file_info.file_path

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ
                    await bot.download_file(file_path, f'photos/{photo_id}.jpg')
                    photos_for_save.append(f'photos/{photo_id}.jpg')

                await db.update_attachments_income(message.from_user.id, photos_for_save)

            except KeyError:
                pass

            try:
                documents = data["documents"]

                documents_for_save = []

                os.makedirs('documents', exist_ok=True)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                for docs_id in documents:
                    try:
                        file_info = await bot.get_file(docs_id)

                    except aiogram.utils.exceptions.FileIsTooBig:
                        await message.reply("–ë—Ä–∞—Ç, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª —Ç—ã –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª")

                    file_path = file_info.file_path

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ
                    await bot.download_file(file_path, f'documents/{docs_id}.pdf')
                    documents_for_save.append(f'documents/{docs_id}.pdf')

                await db.update_attachments_income(message.from_user.id, documents_for_save)

            except KeyError:
                pass

            try:
                video = data["video"]

                video_for_save = []

                os.makedirs('video', exist_ok=True)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
                for video_id in video:
                    file_info = await bot.get_file(video_id)
                    file_path = file_info.file_path

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ
                    await bot.download_file(file_path, f'video/{video_id}.mp4')
                    video_for_save.append(f'video/{video_id}.mp4')

                await db.update_attachments_income(message.from_user.id, video_for_save)

            except KeyError:
                pass

        async with state.proxy() as data:
            expense = data["income"]

            await db.update_income(message.from_user.id, expense)

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.reset_state()

        # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await message.reply("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ", reply_markup=main_menu_keyboard)
        await MenuStates.start.set()

    else:
        await bot.send_message(message.from_user.id, "–ë—Ä–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É",
                               reply_markup=back_keyboard)


@dp.message_handler(state=MenuStates.fraction_enter)
async def fraction_handle(message: types.Message, state: FSMContext):
    match message.text:
        case "–ù–∞–∑–∞–¥":
            await bot.send_message(message.from_user.id, "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", reply_markup=main_menu_keyboard)
            await MenuStates.start.set()

        case "–í—ã–ø–ª–∞—Ç–∏—Ç—å":
            await bot.send_message(message.from_user.id, "–ö–æ–º—É –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º –¥–æ–ª—é?",
                                   reply_markup=fraction_choose_who_keyboard)
            await MenuStates.fraction_choose_who.set()

        case "–ö –≤—ã–ø–ª–∞—Ç–µ":
            await bot.send_message(message.from_user.id, "–ö–æ–º—É?", reply_markup=fraction_choose_who_keyboard)
            await MenuStates.fraction_to_who.set()

        case _:
            await bot.send_message(message.from_user.id, "–ò–∑–≤–∏–Ω–∏, –±—Ä–∞—Ç, –Ω–æ —Ç—É—Ç –Ω–∞–¥–æ –ø—É–Ω–∫—Ç—ã –≤—ã–±–∏—Ä–∞—Ç—å",
                                   reply_markup=fraction_keyboard)


@dp.message_handler(state=MenuStates.fraction_choose_who)
async def fraction_handle(message: types.Message, state: FSMContext):
    match message.text:
        case "–ù–∞–∑–∞–¥":
            await bot.send_message(message.from_user.id, "–¢–∞–∫ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º –∏–ª–∏ —Ö–æ—Ç–∏–º –ø–æ–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è?",
                                   reply_markup=fraction_keyboard)
            await MenuStates.fraction_enter.set()

        case "–ú–∏—à–∞" | "–î–∞—Ç–æ" | "–ì–ª–µ–±":
            await bot.send_message(message.from_user.id, "–°–∫–æ–ª—å–∫–æ –≤—ã–ø–ª–∞—Ç–∏–ª–∏?", reply_markup=back_keyboard)
            await MenuStates.fraction_pay.set()

        case _:
            await bot.send_message(message.from_user.id, "–ò–∑–≤–∏–Ω–∏, –±—Ä–∞—Ç, –Ω–æ —Ç—É—Ç –Ω–∞–¥–æ –ø—É–Ω–∫—Ç—ã –≤—ã–±–∏—Ä–∞—Ç—å",
                                   reply_markup=fraction_choose_who_keyboard)


@dp.message_handler(state=MenuStates.fraction_pay)
async def fraction_pay_handle(message: types.Message, state: FSMContext):
    match message.text:
        case "–ù–∞–∑–∞–¥":
            await bot.send_message(message.from_user.id, "–í—ã–ø–ª–∞—Ç–∏—Ç—å: –æ—Ç—á–∏—Ç–∞—Ç—å—Å—è –æ –≤—ã–ø–ª–∞—Ç–µ –¥–æ–ª–∏ —Å–µ–±–µ –∏–ª–∏ –±—Ä–∞—Ç—É.\n"
                                                         "–ö –≤—ã–ø–ª–∞—Ç–µ: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ–ª–∂–Ω—ã –≤—ã–ø–ª–∞—Ç–∏—Ç—å"
                                                         " —Ç–µ–±–µ –∏–ª–∏ –±—Ä–∞—Ç—É.",
                                   reply_markup=fraction_choose_who_keyboard)
            await MenuStates.fraction_choose_who.set()
        case _:
            try:
                num = message.text.replace(",", ".")
                float(num)

                await db.update_pay_fraction(message.from_user.id, message.text)
                await db.update_negative_debt(message.from_user.id, message.text)

                await bot.send_message(message.from_user.id, "–ü—Ä–∏–Ω—è—Ç–æ",
                                       reply_markup=main_menu_keyboard)
                await MenuStates.start.set()

            except ValueError:
                await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä–∞–º–∏, –±–µ–∑ –±—É–∫–≤, –∑–Ω–∞–∫–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤",
                                       reply_markup=back_keyboard)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ fraction_pay_handle {e}")


@dp.message_handler(state=MenuStates.fraction_to_who)
async def fraction_to_who_handle(message: types.Message, state: FSMContext):
    match message.text:
        case "–ù–∞–∑–∞–¥":
            await bot.send_message(message.from_user.id, "–¢–∞–∫ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º –∏–ª–∏ —Ö–æ—Ç–∏–º –ø–æ–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è?",
                                   reply_markup=fraction_keyboard)
            await MenuStates.fraction_enter.set()

        case "–ú–∏—à–∞":
            fraction_without_percent = await db.get_fraction_without_percent(message.from_user.id)

            fraction = fraction_without_percent*0.4

            old_fraction = await db.get_old_fraction(message.from_user.id)
            if old_fraction != 0:
                await db.update_positive_debt(message.from_user.id, old_fraction)
            else:
                await db.update_positive_debt(message.from_user.id, fraction)

            await db.update_fraction(message.from_user.id, fraction, "–ú–∏—à–∞")

            debt = await db.get_debt(message.from_user.id)

            await bot.send_message(message.from_user.id, f"–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ú–∏—à–µ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–ª–∞—Ç–∏—Ç—å"
                                                         f" {debt} —Ä—É–±.",
                                   reply_markup=pay_keyboard)



            await MenuStates.fraction_to_pay.set()

        case "–î–∞—Ç–æ":
            fraction_without_percent = await db.get_fraction_without_percent(message.from_user.id)

            fraction = fraction_without_percent * 0.24

            old_fraction = await db.get_old_fraction(message.from_user.id)
            if old_fraction != 0:
                await db.update_positive_debt(message.from_user.id, old_fraction)
            else:
                await db.update_positive_debt(message.from_user.id, fraction)

            await db.update_fraction(message.from_user.id, fraction, "–î–∞—Ç–æ")

            debt = await db.get_debt(message.from_user.id)

            await bot.send_message(message.from_user.id, f"–ù–∞ —Å–µ–≥–æ–¥–Ω—è –î–∞—Ç–æ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–ª–∞—Ç–∏—Ç—å"
                                                         f" {debt} —Ä—É–±.",
                                   reply_markup=pay_keyboard)

            await MenuStates.fraction_to_pay.set()

        case "–ì–ª–µ–±":
            fraction_without_percent = await db.get_fraction_without_percent(message.from_user.id)

            fraction = fraction_without_percent * 0.36

            old_fraction = await db.get_old_fraction(message.from_user.id)
            if old_fraction != 0:
                await db.update_positive_debt(message.from_user.id, old_fraction)
            else:
                await db.update_positive_debt(message.from_user.id, fraction)

            await db.update_fraction(message.from_user.id, fraction, "–ì–ª–µ–±")

            debt = await db.get_debt(message.from_user.id)

            await bot.send_message(message.from_user.id, f"–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ì–ª–µ–±—É –¥–æ–ª–∂–Ω—ã –≤—ã–ø–ª–∞—Ç–∏—Ç—å"
                                                         f" {debt} —Ä—É–±.",
                                   reply_markup=pay_keyboard)

            await MenuStates.fraction_to_pay.set()

        case _:
            await bot.send_message(message.from_user.id, "–ò–∑–≤–∏–Ω–∏, –±—Ä–∞—Ç, –Ω–æ —Ç—É—Ç –Ω–∞–¥–æ –ø—É–Ω–∫—Ç—ã –≤—ã–±–∏—Ä–∞—Ç—å",
                                   reply_markup=fraction_choose_who_keyboard)


@dp.message_handler(state=MenuStates.fraction_to_pay)
async def fraction_pay_handle(message: types.Message, state: FSMContext):
    match message.text:
        case "–ù–∞–∑–∞–¥":
            await bot.send_message(message.from_user.id, "–ß—å—é –¥–æ–ª—é –∫ –≤—ã–ø–ª–∞—Ç–µ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?",
                                   reply_markup=fraction_choose_who_keyboard)
            await MenuStates.fraction_to_who.set()

        case "–í—ã–ø–ª–∞—Ç–∏—Ç—å":
            await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –≤—ã–ø–ª–∞—Ç–∏—Ç—å",
                                   reply_markup=back_keyboard)

        case _:
            try:
                num = message.text.replace(",", ".")
                float(num)

                await db.update_pay_fraction(message.from_user.id, message.text)
                await db.update_negative_debt(message.from_user.id, message.text)

                await bot.send_message(message.from_user.id, "–ü—Ä–∏–Ω—è—Ç–æ", reply_markup=main_menu_keyboard)
                await MenuStates.start.set()

            except ValueError:
                await bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä–∞–º–∏, –±–µ–∑ –±—É–∫–≤, –∑–Ω–∞–∫–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤",
                                       reply_markup=back_keyboard)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ fraction_to_pay_handle {e}")


@dp.message_handler(state=MenuStates.report)
async def report_handle(message: types.Message, state: FSMContext):
    match message.text:
        case "–ù–∞–∑–∞–¥":
            await bot.send_message(message.from_user.id, "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", reply_markup=main_menu_keyboard)
            await MenuStates.start.set()

        case "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
            await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ")
            await bot.send_message(message.from_user.id, "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", reply_markup=main_menu_keyboard)

        case "–ü–µ—Ä–∏–æ–¥":
            calenda = generate_calendar(datetime.datetime.now().year, datetime.datetime.now().month)
            await bot.send_message(message.from_user.id, '–°–µ–≥–æ–¥–Ω—è - ' +
                                   str(datetime.datetime.today().strftime("%#d %B %Y")), reply_markup=back_keyboard)
            await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç—á—ë—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞",
                                   reply_markup=calenda)
            await MenuStates.choose_second_period.set()

        case _:
            await bot.send_message(message.from_user.id, "–ò–∑–≤–∏–Ω–∏, –±—Ä–∞—Ç, –Ω–æ —Ç—É—Ç –Ω–∞–¥–æ –ø—É–Ω–∫—Ç—ã –≤—ã–±–∏—Ä–∞—Ç—å",
                                   reply_markup=choose_period_keyboard)


@dp.callback_query_handler(state=MenuStates.choose_second_period)
async def day_chosen(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data.startswith('calendar-month'):
        year, month = callback_query.data.split('-')[2:]
        year, month = int(year), int(month)
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        calendar_markup = generate_calendar(year, month)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        await bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id,
                                            reply_markup=calendar_markup)

    else:
        selected_date = callback_query.data.split('-')[2]
        string = f"{selected_date}.{callback_query.data.split('-')[3]}.{callback_query.data.split('-')[4]}"
        date_object_for_bd = datetime.datetime.strptime(string, "%d.%m.%Y")
        calenda = generate_calendar(datetime.datetime.now().year, datetime.datetime.now().month)
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç—á—ë—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞",
                               reply_markup=back_keyboard)
        await bot.send_message(callback_query.from_user.id, "–ö–∞–ª–µ–Ω–¥–∞—Ä—å",
                               reply_markup=calenda)
        await MenuStates.send_report.set()


@dp.message_handler(state=MenuStates.choose_second_period)
async def report_handle(message: types.Message, state: FSMContext):
    match message.text:
        case "–ù–∞–∑–∞–¥":
            await bot.send_message(message.from_user.id, "–¢–∞–∫ –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥?",
                                   reply_markup=choose_period_keyboard)
            await MenuStates.report.set()


@dp.callback_query_handler(state=MenuStates.send_report)
async def day_chosen(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data.startswith('calendar-month'):
        year, month = callback_query.data.split('-')[2:]
        year, month = int(year), int(month)
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        calendar_markup = generate_calendar(year, month)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        await bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id,
                                            reply_markup=calendar_markup)

    else:
        selected_date = callback_query.data.split('-')[2]
        string = f"{selected_date}.{callback_query.data.split('-')[3]}.{callback_query.data.split('-')[4]}"
        date_object_for_bd = datetime.datetime.strptime(string, "%d.%m.%Y")
        await bot.send_message(callback_query.from_user.id, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç")
        await bot.send_message(callback_query.from_user.id, "–ú–µ–Ω—é", reply_markup=main_menu_keyboard)
        await MenuStates.start.set()


@dp.message_handler(state=MenuStates.send_report)
async def report_handle(message: types.Message, state: FSMContext):
    match message.text:
        case "–ù–∞–∑–∞–¥":
            calenda = generate_calendar(datetime.datetime.now().year, datetime.datetime.now().month)
            await bot.send_message(message.from_user.id, "–û—Ç–∫—É–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º?",
                                   reply_markup=back_keyboard)
            await bot.send_message(message.from_user.id, "–ö–∞–ª–µ–Ω–¥–∞—Ä—å",
                                   reply_markup=calenda)

            await MenuStates.choose_second_period.set()


executor.start_polling(dp, skip_updates=True)
